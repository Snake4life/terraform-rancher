resource rancher2_catalog jetstack {
  name       = "jetstack"
  scope      = "cluster"
  cluster_id = data.terraform_remote_state.cluster.outputs.cluster_id
  url        = "https://charts.jetstack.io"
}

resource rancher2_namespace cert_manager {
  name        = "cert-manager"
  description = "Namespace for cert-manager app components"
  project_id  = data.rancher2_project.system.id
}

resource rancher2_app cert_manager {
  name             = "cert-manager"
  template_name    = "cert-manager"
  catalog_name     = "${data.terraform_remote_state.cluster.outputs.cluster_id}:${rancher2_catalog.jetstack.name}"
  project_id       = data.rancher2_project.system.id
  target_namespace = rancher2_namespace.cert_manager.name
  answers = {
    "image.pullPolicy"            = "Always"
    "webhook.image.pullPolicy"    = "Always"
    "cainjector.image.pullPolicy" = "Always"
    "extraArgs"                   = "--dns01-recursive-nameservers=1.1.1.1:53,1.0.0.1:53"
  }
}

data template_file cert_manager_staging_issuer {
  template = file("${path.module}/templates/cloudflare_issuer.yaml.tpl")
  vars = {
    issuer_name          = "letsencrypt-staging"
    acme_ca_server       = "https://acme-staging-v02.api.letsencrypt.org/directory"
    acme_email           = var.acme_email
    cloudflare_api_email = var.cloudflare_api_email
  }
}

data template_file cert_manager_production_issuer {
  template = file("${path.module}/templates/cloudflare_issuer.yaml.tpl")
  vars = {
    issuer_name          = "letsencrypt-production"
    acme_ca_server       = "https://acme-v02.api.letsencrypt.org/directory"
    acme_email           = var.acme_email
    cloudflare_api_email = var.cloudflare_api_email
  }
}

resource rancher2_secret cloudflare_api {
  name         = "cloudflare-api-key"
  project_id   = data.rancher2_project.system.id
  namespace_id = rancher2_namespace.cert_manager.id
  data = {
    api-key = base64encode(var.cloudflare_api_key)
  }
}

module install_staging_issuer {
  source = "../modules/kubernetes_manifest"
  manifest_yaml = data.template_file.cert_manager_staging_issuer.rendered
}

module install_production_issuer {
  source = "../modules/kubernetes_manifest"
  manifest_yaml = data.template_file.cert_manager_production_issuer.rendered
}